# main.py
import telebot
from telebot import types
import schedule
import threading
import time
from datetime import datetime, timedelta
from config import BOT_TOKEN
from database import Database
from card_system import CardSystem
from bonus_system import BonusSystem


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(BOT_TOKEN)
db = Database()
card_system = CardSystem(db)
bonus_system = BonusSystem(db)

WEBHOOK_HOST = 'PehenyshkaCookie.pythonanywhere.com' 
WEBHOOK_PATH = '/webhook'

app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK'
    else:
        return 'Bad Request', 403

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_command(message):
	user_id = message.from_user.id
	username = message.from_user.username
	time_sended = message.date

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	db.register_user(user_id, username, time_sended)

	welcome_text = f"""
**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä One Piece Cards!**
–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
–¢–µ–±—è –∂–¥–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å–±–æ—Ä—É –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π One Piece!
üé¥ **–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:**
‚Ä¢ /card - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (—Ä–∞–∑ –≤ 2 —á–∞—Å–∞)
‚Ä¢ /collection - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
‚Ä¢ /top - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ /daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ /profile - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /help - –ü–æ–º–æ—â—å
‚≠ê **–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫:**
{chr(11088) * 5} –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è (0.5%)
{chr(11088) * 4} –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è (2.5%)
{chr(11088) * 3} –≠–ø–∏—á–µ—Å–∫–∞—è (9%)
{chr(11088) * 2} –†–µ–¥–∫–∞—è (28%)
{chr(11088) * 1} –û–±—ã—á–Ω–∞—è (60%)
–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /card –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏! üéØ
"""
	bot.reply_to(message, welcome_text, parse_mode='Markdown')
@bot.message_handler(commands=['card'])
def drop_card_command(message):
    user_id = message.from_user.id
    time_to_drop = message.date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—å –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞
    user_cards = db.get_user_cards(user_id)
    if not user_cards:
        # –ü–µ—Ä–≤—ã–π –¥—Ä–æ–ø –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω
        card = card_system.drop_card_for_user(user_id, time_to_drop)
        if card:
            card_info = card_system.format_card_info(card)
            image_path = card[4]
            if image_path:
                try:
                    with open(f"cards/{image_path}", 'rb') as photo:
                        bot.send_photo(message.chat.id, photo, caption=card_info, parse_mode='Markdown')
                except FileNotFoundError:
                    bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
            else:
                bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    if not db.can_drop_card(user_id, time_to_drop):
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (–±–æ–Ω—É—Å)
        if bonus_system.use_extra_drop(user_id):
            card = card_system.drop_card_for_user(user_id, time_to_drop)
            if card:
                card_info = card_system.format_card_info(card)
                image_path = card[4] # image_path
                if image_path:
                    try:
                        with open(f"cards/{image_path}", 'rb') as photo:
                            bot.send_photo(message.chat.id, photo, caption=card_info, parse_mode='Markdown')
                    except FileNotFoundError:
                        bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
                else:
                    bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return  # –í–∞–∂–Ω–æ! –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ
        # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–Ω—É—Å–∞ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        user = db.get_user(user_id)
        if user and user[3]: # last_card_drop
            if isinstance(user[3], int):
                last_drop_time = datetime.fromtimestamp(user[3])
            else:
                last_drop_time = datetime.strptime(str(user[3]), '%Y-%m-%d %H:%M:%S')
            last_drop = last_drop_time
            next_drop = last_drop + timedelta(hours=2)
            wait_time =  next_drop - datetime.fromtimestamp(time_to_drop)

            hours = int(wait_time.total_seconds() // 3600)
            minutes = int((wait_time.total_seconds() % 3600) // 60)

            bot.reply_to(message, f"‚è∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω")
        return

    # –í—ã–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–±—ã—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)
    card = card_system.drop_card_for_user(user_id, time_to_drop)

    if card:
        card_info = card_system.format_card_info(card)
        image_path = card[4] # image_path
        if image_path:
            try:
                with open(f"cards/{image_path}", 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=card_info, parse_mode='Markdown')
            except FileNotFoundError:
                bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
        else:
            bot.reply_to(message, f"üéâ **–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!**\n{card_info}", parse_mode='Markdown')
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
@bot.message_handler(commands=['collection'])
def collection_command(message):
	user_id = message.from_user.id

	# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	markup = types.InlineKeyboardMarkup()
	markup.row(
		types.InlineKeyboardButton("üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="collection_summary"),
		types.InlineKeyboardButton("üé¥ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="collection_all")
	)
	markup.row(
		types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="collection_5"),
		types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="collection_4"),
		types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="collection_3")
	)
	markup.row(
		types.InlineKeyboardButton("‚≠ê‚≠ê", callback_data="collection_2"),
		types.InlineKeyboardButton("‚≠ê", callback_data="collection_1")
	)

	bot.reply_to(message, "üìö **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:**\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
				 reply_markup=markup, parse_mode='Markdown')
@bot.callback_query_handler(func=lambda call: call.data.startswith('collection_'))
def collection_callback(call):
    user_id = call.from_user.id
    action = call.data.split('_')[1]

    def get_collection_menu_markup():
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="collection_summary"),
            types.InlineKeyboardButton("üé¥ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="collection_all")
        )
        markup.row(
            types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="collection_5"),
            types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="collection_4"),
            types.InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="collection_3")
        )
        markup.row(
            types.InlineKeyboardButton("‚≠ê‚≠ê", callback_data="collection_2"),
            types.InlineKeyboardButton("‚≠ê", callback_data="collection_1")
        )
        return markup

    if action == "summary":
        summary = card_system.get_user_collection_summary(user_id)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="collection_menu"))
        bot.edit_message_text(summary, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)

    elif action == "all":
        cards = db.get_user_cards(user_id)
        if not cards:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫!", show_alert=True)
            return

        card_counter = {}
        for card in cards:
            name = card[1]
            if name in card_counter:
                card_counter[name]["count"] += 1
            else:
                card_counter[name] = {"stars": card[2], "count": 1}

        cards_text = "üé¥ **–í—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:**\n\n"
        for i, (name, info) in enumerate(list(card_counter.items())[:20]):
            stars = "‚≠ê" * info["stars"]
            count = info["count"]
            cards_text += f"{i+1}. {name} {stars} x{count}\n"

        if len(card_counter) > 20:
            cards_text += f"\n... –∏ –µ—â–µ {len(card_counter) - 20} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="collection_menu"))
        bot.edit_message_text(cards_text, call.message.chat.id, call.message.message_id,
                            parse_mode='Markdown', reply_markup=markup)

    elif action.isdigit():
        rarity = int(action)
        cards = [card for card in db.get_user_cards(user_id) if card[2] == rarity]

        if not cards:
            bot.answer_callback_query(call.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ {rarity}‚òÖ —É—Ä–æ–≤–Ω—è!", show_alert=True)
            return

        card_counter = {}
        for card in cards:
            name = card[1]
            if name in card_counter:
                card_counter[name]["count"] += 1
            else:
                card_counter[name] = {
                    "total_power": card[5] + card[6] + card[7] + card[8],
                    "count": 1
                }

        stars = "‚≠ê" * rarity
        cards_text = f"üé¥ **–ö–∞—Ä—Ç–æ—á–∫–∏ {stars} —É—Ä–æ–≤–Ω—è:**\n\n"

        for i, (name, info) in enumerate(list(card_counter.items())[:20]):
            cards_text += f"{i+1}. {name} (üí™{info['total_power']}) x{info['count']}\n"

        if len(card_counter) > 20:
            cards_text += f"\n... –∏ –µ—â–µ {len(card_counter) - 20} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="collection_menu"))
        bot.edit_message_text(cards_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)

    elif action == "menu":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        bot.edit_message_text(
            "üìö **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:**\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=get_collection_menu_markup()
        )
@bot.message_handler(commands=['top'])
def top_command(message):
	leaderboard = db.get_leaderboard(10)

	if not leaderboard:
		bot.reply_to(message, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!")
		return

	top_text = "üèÜ **–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:**\n\n"

	medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 7

	for i, player in enumerate(leaderboard):
		username = player[1] or f"–ò–≥—Ä–æ–∫ {player[0]}"
		username = escape_markdown(username)
		total_cards = player[2] or 0
		total_power = player[3] or 0
		rare_cards = player[4] or 0

		top_text += f"{medals[i]} **{username}**\n"
		top_text += f" üé¥ –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards} | üí™ –°–∏–ª–∞: {total_power} | ‚≠ê –†–µ–¥–∫–∏—Ö: {rare_cards}\n\n"

	bot.reply_to(message, top_text, parse_mode='Markdown')
@bot.message_handler(commands=['daily'])
def bonus_command(message):
	user_id = message.from_user.id

	if bonus_system.can_claim_daily_bonus(user_id):
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–æ–Ω—É—Å–æ–≤
		bonuses = bonus_system.get_daily_bonus_options()

		markup = types.InlineKeyboardMarkup()
		for bonus in bonuses:
			markup.row(types.InlineKeyboardButton(
				f"{bonus['emoji']} {bonus['name']}",
				callback_data=f"bonus_{bonus['type']}"
			))

		bot.reply_to(message,
					 "üéÅ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω!**\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
					 reply_markup=markup, parse_mode='Markdown')
	else:
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤
		status = bonus_system.get_bonus_status(user_id)
		bot.reply_to(message, status, parse_mode='Markdown')
@bot.callback_query_handler(func=lambda call: call.data.startswith('bonus_'))
def bonus_callback(call):
    user_id = call.from_user.id
    bonus_type = call.data[len('bonus_'):]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

    if bonus_system.claim_daily_bonus(user_id, bonus_type):
        bonuses = bonus_system.get_daily_bonus_options()
        bonus_info = next((b for b in bonuses if b['type'] == bonus_type), None)

        if bonus_info:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            name = escape_markdown(bonus_info['name'])
            description = escape_markdown(bonus_info['description'])
            emoji = escape_markdown(bonus_info['emoji'])
            success_text = f"‚úÖ *–ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n{emoji} {name}\n{description}"
            bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id,
                                 parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞", show_alert=True)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!", show_alert=True)
@bot.message_handler(commands=['profile'])
def stats_command(message):
	user_id = message.from_user.id
	stats = db.get_user_stats(user_id)
	user = db.get_user(user_id)

	if not stats or not user:
		bot.reply_to(message, "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
		return

	total_cards = stats[0] or 0
	total_power = stats[1] or 0
	legendary_cards = stats[2] or 0
	epic_cards = stats[3] or 0

	registration_date = user[2]
	last_drop = datetime.fromtimestamp(user[3]) # last_card_drop
	if not last_drop:
		return True

	# –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if registration_date:
		reg_date = datetime.strptime(registration_date, '%Y-%m-%d %H:%M:%S')
		days_playing = (datetime.now() - reg_date).days
	else:
		days_playing = 0

	stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë§ **–û–±—â–µ–µ:**
üóì –î–Ω–µ–π –≤ –∏–≥—Ä–µ: {days_playing}
üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}
üí™ –û–±—â–∞—è —Å–∏–ª–∞: {total_power}
‚≠ê **–†–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã:**
üåü 5‚òÖ –∫–∞—Ä—Ç–æ—á–µ–∫: {legendary_cards}
üî• 4‚òÖ –∫–∞—Ä—Ç–æ—á–µ–∫: {epic_cards}
‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–æ–ø:** {last_drop or '–ù–∏–∫–æ–≥–¥–∞'}
"""

	bot.reply_to(message, stats_text, parse_mode='Markdown')
@bot.message_handler(commands=['help'])
def help_command(message):
	help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**
üé¥ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /card - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
‚Ä¢ /collection - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
‚Ä¢ /profile - –í–∞—à–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /top - –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
üéÅ **–ë–æ–Ω—É—Å—ã:**
‚Ä¢ /daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
üéØ **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–ø–∞–¥–∞—é—Ç —Å —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö —à–∞–Ω—Å–æ–≤
‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ —Ä–µ–¥–∫–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è –æ—Å–æ–±—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
–£–¥–∞—á–∏ –≤ —Å–±–æ—Ä–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏! üçÄ
"""

	bot.reply_to(message, help_text, parse_mode='Markdown')
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
def schedule_jobs():
	"""–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
	schedule.every().day.at("00:00").do(bonus_system.reset_daily_bonuses)

	while True:
		schedule.run_pending()
		time.sleep(60) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=schedule_jobs)
scheduler_thread.daemon = True
scheduler_thread.start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
	bot.reply_to(message, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown v2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + c if c in escape_chars else c for c in str(text)])

if __name__ == "__main__":

    app.run() 
    # print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # print("üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    # print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    # print("üé¥ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≥–æ—Ç–æ–≤–∞")

	# #–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    # bot.infinity_polling(none_stop=True)
